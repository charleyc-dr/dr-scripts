custom_require.call(%w[common common-arcana common-items common-money common-travel drinfomon spellmonitor equipmanager])

class TheurgyActions
  include DRC
  include DRCI
  include DRCT
  include DRCM
  include DRCA
  
  @@ritual_order = [:tithe,
                    :study_wall,
                    :refectory,
                    :carve_bead,
                    :sirese_seed,
                    :bathe,
                    :pray_badge,
                    :dance,
                    :incense,
                    :wine,
                    :recite_prayer,
                    :clean_altar,
                    :embarass_myself]

  def initialize(settings, data)
    @settings = settings
    @hometown = @settings.hometown
    @data = data

    @theurgy_supply_container = @settings.theurgy_supply_container
    @water_holder = @settings.water_holder
    @immortal_aspect = @settings.immortal_aspect
    @flint_lighter = @settings.flint_lighter
    @safe_room = @settings.safe_room

    @rituals = @@ritual_order.select { |ritual| should_perform_ritual?(ritual) }
    @communes = get_communes

    echo "Rituals: #{@rituals.join(', ')}"
    echo "Communes: #{@communes.join(', ')}"
  end

  def should_perform_ritual?(ritual)
    return false if (@settings.theurgy_blacklist || []).include? ritual.to_s
    if !(@settings.theurgy_whitelist || []).empty?
      return false unless @settings.theurgy_whitelist.include? ritual.to_s
    end

    return false unless supplies_available?(ritual)

    case ritual
    when :pray_badge, :embarass_myself
      # Global rituals. You can embarass yourself anywhere!
      return true
    when :incense, :wine, :recite_prayer, :clean_altar
      # TODO: support prayer mat
      return @data['altar']
    when :dance
      return @data['altar'] && DRStats.circle >= 10
    when :tithe
      return @data['almsbox'] && @settings.tithe
    when :bathe
      return @data['bath']
    when :carve_bead
      # TODO
    when :sirese_seed
      return @data['gather_sirese'] && @data['plant_sirese']
    when :study_wall
      return false unless @data['extra_rituals'].include? ritual.to_s
      return DRStats.circle >= 30
    else
      return @data['extra_rituals'].include? ritual.to_s
    end
  end

  def get_communes
    res = []
    if DRStats.circle > 3 && DRSkill.getrank('Outdoorsmanship') > 20 && @data['dirt_foraging']
      res << :eluned
    end
    (res << :tamsine) if DRStats.circle > 2
    (res << :truffenyi) if DRStats.circle > 60
    (res << :kertigen) if DRStats.circle > 8
    res.select { |commune| supplies_available?(commune) }
  end

  def rituals_remain?
    !@rituals.empty?
  end

  def supplies_available?(ritual_or_commune)
    supplies_needed_for(ritual_or_commune).none? do |item|
      !on_hand?(item) && !supply_shop(item)
    end
  end

  def supplies_needed_for(ritual_or_commune)
    case ritual_or_commune
    # Rituals
    when :carve_bead
      # TODO
    when :bathe
      if @data['herbs']
        @data['herbs'].map(&:to_sym)
      else
        [:sage, :lavender]
      end
    when :incense
      [:incense, :flint]
    when :wine
      [:wine]
    when :embarass_myself
      [:parchment]
      
    # Communes
    when :truffenyi
      [:taffelberries]
    when :kertigen
      [:oil]
    else
      []
    end
  end
    
  def on_hand?(item)
    case item
    when :oil
      inside_container?('holy oil') || inside_container?('some oil')
    when :taffelberries
      inside_container?('Taffelberries')
    when :carving_knife, :shaper, :prayer_chain
      # These don't have to be in the theurgy supplies container
      exists?(item.to_s.humanize.downcase)
    else
      inside_container?(item.to_s.humanize.downcase)
    end
  end

  def inside_container?(item)
    inside?(item, @theurgy_supply_container)
  end

  def put_in_container(item)
    bput "put #{item} in my #{@theurgy_supply_container}", 'You put', 'What were you referring to'
  end

  def get_from_container(item)
    bput "get #{item} from my #{@theurgy_supply_container}", 'You get', 'I could not find', 'What were you referring to'
  end
    
  def have_holy_water?
    inside?('holy water', @water_holder)    
  end

  def supply_shop(item)
    case item
    when :incense, :sage, :lavender, :chamomile, :wine
      @data['theurgy_supplies']
    when :oil
      @data['oil_shop']
    when :flint
      @data['flint_shop']
    when :taffelberries
      # TODO
    when :parchment
      # TODO
    end
  end

  def buy_supplies
    items_to_buy = (@rituals + @communes).map { |r| supplies_needed_for(r) }.flatten
    items_to_buy.uniq!
    items_to_buy.reject! { |item| on_hand?(item) }
    
    shops_and_items = items_to_buy.map { |i| [supply_shop(i), i] }
    shops_and_items.sort_by { |shop, _item| shop['id'] }

    ensure_copper_on_hand(600, @hometown) unless items_to_buy.empty?

    # TODO: Need special handling for certain items
    shops_and_items.each do |shop, item|
      buy_item(shop['id'], item)
      put_in_container(item)
    end
  end

  def perform_next_action
    perform_next_ritual unless perform_next_commune
  end

  ### COMMUNES ###
  def perform_next_commune
    return false if @communes.empty? || !can_commune?
    @communes.size.times do
      commune = @communes.first
      if commune_ready?(commune) && perform_commune(commune)
        return true
      else
        @communes.rotate!
      end
    end
    false
  end

  def commune_ready?(commune)
    !Flags["theurgy-#{commune}"]
  end

  def can_commune?
    return true unless Flags['theurgy-commune']
    return Flags['theurgy-commune'].include? 'fully prepared to seek assistance from the Immortals once again'
  end
  
  def perform_commune(commune)
    stow_hands
    return false if supplies_needed_for(commune).any? { |i| !on_hand?(i) }
    
    case commune
    when :eluned
      commune_eluned
    when :tamsine
      commune_tamsine
    when :truffenyi
      commune_truffenyi
    when :kertigen
      commune_kertigen
    end
  end

  def commune_eluned
    walk_to @data['dirt_foraging']['id']
    forage? 'dirt'
    
    get_from_container(@water_holder)
    match = bput('commune eluned',
                 'completed this commune too recently',
                 'You grind some dirt in your fist')
    put_in_container(@water_holder)
    fput('drop dirt') if [left_hand, right_hand].include?('dirt')

    match == 'You grind some dirt in your fist'
  end

  def commune_tamsine
    return false unless have_holy_water?
    
    pause 1
    waitrt?
    get_from_container(@water_holder)
    fput "sprinkle #{@water_holder} on #{checkname}"
    match = bput('commune tamsine',
                 'completed this commune too recently',
                 'You feel warmth spread throughout your body')
    put_in_container(@water_holder)

    match == 'You feel warmth spread throughout your body'
  end

  def commune_truffenyi
    get_from_container('Taffelberries')
    bput('commune truffenyi',
         'completed this commune too recently',
         'The power of Truffenyi has answered your prayer')
    pause 1
    if right_hand.include? 'orb'
      fput 'drop orb'
      return true
    else
      fput 'get Taffelberries'
      put_in_container('Taffelberries')
      return false
    end
  end
  
  def commune_kertigen
    if inside_container?('holy oil')
      get_from_container('holy oil')
    else
      get_from_container('some oil')
      cast_spell({'abbrev' => 'bless',
                  'mana' => 1,
                  'prep_time' => 5,
                  'cast' => 'cast oil'}, @settings)
    end
    
    if right_hand.include? 'holy oil'
      fput "sprinkle oil on #{checkname}"
      put_in_container('oil')
      match = bput('commune kertigen',
                   'completed this commune too recently',
                   'The thick smell of ozone fills your nostrils')
      return match =~ /ozone/
    else
      stow_items
      return false
    end
  end

  ### RITUALS ###
  def perform_next_ritual
    perform_ritual(@rituals.shift) if rituals_remain?
  end

  def perform_ritual(ritual)
    send(ritual)
  end

  def tithe
    if UserVars.tithe_timer
      return false unless Time.now - UserVars.tithe_timer > 60 * 10
    end
    return false unless withdraw_exact_amount?('5 silver', @hometown)

    walk_to @data['almsbox']
    UserVars.tithe_timer = Time.now
    # TODO: does almsbox name vary by location?
    bput("put 5 silver #{hometown_currency(@hometown)} in almsbox",
         'You drop', 'But you do not')
  end

  def study_wall
    get_data('spells').spell_data do |name, properties|
      if properties['cyclic'] && DRSpells.active_spells.keys.include?(name)
        return false
      end
    end

    walk_to '5872'
    move 'go stair'
    waitfor 'Four beautifully detailed figures'
    walk_to '5846'
    case bput('pull candle',
              'You tug at the silver candlestick but it',
              'You grasp hold of the silver candlestick and pull it back')
    when 'You grasp hold of the silver candlestick and pull it back'
      case bput('study wall',
                'Turning your attention to the sigils',
                'interrupt your research')
      when 'Turning your attention to the sigils'
        waitfor 'as your understanding of the sigils gradually slips away.'
      when 'interrupt your research'
        echo 'Researching - skipping Study'
      end
      pause
      move 'go hatch'
    end
    walk_to '5756'
    move 'go stair'
    waitfor 'A low relief has been carefully carved'
    true
  end

  def refectory
    walk_to '5988'
    fput 'meditate'
    waitrt?    
  end

  def carve_bead
    # TODO
  end

  def sirese_seed
    return false unless have_holy_water?
    walk_to @data['gather_sirese']['id']
    
    exit unless DRRoom.npcs.empty? # Invasion check    
    waitrt? while bput('gather seed',
                       'You find a tiny',
                       'This is not a good',
                       'You come up empty') == 'You come up empty'
    waitrt?
    walk_to @data['plant_sirese']['id']
    fput 'plant seed'
    get_from_container(@water_holder)
    fput "sprinkle #{@water_holder} on room"
    put_in_container(@water_holder)
    true
  end

  def bathe
    walk_to @data['bath']['id']
    (@data['bath']['path_in'] || []).each { |dir| move(dir) }
    (@data['herbs'] || ['sage', 'lavender']).each do |herb|
      get_from_container(herb)
      fput "rub #{herb}"
      pause 1
    end
    waitfor 'You wake up once more, blinking dazedly.'
    # waitfor @data['bath']['room_name']
    fix_standing
    (@data['bath']['path_out'] || []).each { |dir| move(dir) }
    true
  end

  def pray_badge
    case bput('remove badge', 'You take off', 'Remove what')
    when 'You take off'
      fput 'pray badge'
      pause 2
      waitrt?
      bput 'wear badge', 'You put on a', 'You are already'
    when 'Remove what'
      return false if bput('get badge', 'You get', 'I could not find', 'What were you referring to') != 'You get'
      fput 'pray badge'
      pause 2
      waitrt?
      put_in_container 'pilgrim badge'
    end
    true
  end

  def dance
    walk_to @data['altar']
    end_conds =  ['flawless performance to those on high',
                  'In your condition',
                  'Your dance reaches its conclusion']
    all_messages = end_conds + ['You begin to dance',
                                'Your actions grow',
                                'Your dance',
                                'but you falt']
    until end_conds include? bput('dance', *all_messages)
      pause 1
      waitrt?
      fix_standing
    end
    true
  end

  def incense
    walk_to @data['altar']

    bput("get #{@flint_lighter}",
         'You get', 'I could not find', 'What were you referring to')
    get_from_container('incense')

    waitrt? while bput('light my incense with flint',
                       'nothing happens',
                       'bursts into flames',
                       'much too dark in here to do that') == 'nothing happens'
    waitrt?
    fput 'wave incense at altar'
    fput 'snuff incense'
    put_in_container('incense')
    stow_hands
    fput "stow #{@flint_lighter}", 'You put your', 'Stow what'
    pause 1
    true
  end

  def wine
    walk_to @data['altar']
    get_from_container('wine')
    fput 'pour wine on altar'
    put_in_container('wine')
    true
  end

  def recite_prayer
    walk_to @data['altar']
    fput "recite Meraud, power the holy fires that unleash my righteous vengeance;Chadatru, guide my sword to swing in justice;Everild, give me the power to conquer my enemies;Truffenyi, let me not lose sight of compassion and mercy;Else, I will become like those I despise;Urrem'tier, receive into your fetid grasp these wicked souls;May the Tamsine's realms never know their evil ways again;May all the Immortals guide your faithful soldier #{checkname}."
    pause 1
    waitrt?
  end

  def clean_altar
    return false unless inside?('holy water', @water_holder)
    walk_to @data['altar']
    get_from_container(@water_holder)
    fput 'clean altar with holy water'
    waitfor 'You finish your job'
    put_in_container(@water_holder)
    waitrt?
    true
  end

  def embarass_myself
    return unless inside_container?('parchment')
    walk_to(@safe_room)
    get_from_container('golden parchment')
    fput 'invoke my parchment'
    waitfor 'You conclude'
    put_in_container('golden parchment')
  end
end

class Theurgy
  include DRC

  def pray
    waitrt?
    if @favor_god
      bput("pray #{@favor_god}", @favor_god, 'Lady of healing', 'reward of hard effort', 'sign with your hand', 'god of the Void', 'bane of accursed', 'blessing be upon your love', 'honorable and true', 'glory shine on us', 'fire across the lands', 'madness and pain', 'floods strike down', 'Lady of supreme beauty')
    else
      bput('pray meraud', 'meraud')
    end
    waitrt?
  end

  def initialize
    @settings = get_settings
    @hometown = @settings.hometown
    @town_data = get_data('town')[@hometown] || {}
    @theurgy_data = get_data('theurgy')[@hometown] || {}
    @merged_data = @town_data.merge(@theurgy_data)
    
    @favor_god = @settings.favor_god

    Flags.add('theurgy-commune', 'fully prepared to seek assistance from the Immortals once again', 'You will not be able to open another divine conduit yet', 'You grind some dirt in your fist', 'You feel warmth spread throughout your body', 'The power of Truffenyi has answered your prayer', 'The thick smell of ozone fills your nostrils')
    Flags.add('theurgy-eluned', 'You grind some dirt in your fist', 'The waters of Eluned are still in your thoughts')
    Flags.add('theurgy-tamsine', 'You feel warmth spread throughout your body', 'You have been recently enlightened by Tamsine')
    Flags.add('theurgy-truffenyi', 'The power of Truffenyi has answered your prayer', 'You are still captivated by Truffenyi\'s favor')
    Flags.add('theurgy-kertigen', 'The thick smell of ozone fills your nostrils', 'The sounds of Kertigen\'s forge still ring in your ears')
    Flags.add('research_done', '^Breakthrough!')

    @actions = TheurgyActions.new(@settings, @merged_data)
    
    pray
    @actions.buy_supplies
    @actions.perform_next_action while @actions.rituals_remain? and should_continue?

    fput 'commune'
  end

  def should_continue?
    if (@settings.theurgy_exp_threshold || 0) > 0
      return false if DRSkill.getxp('Theurgy') >= @settings.theurgy_exp_threshold
    end
    
    if (@settings.theurgy_scholarship_threshold || 0) > 0
      # Scholarship threshold only applies if we've locked Theurgy.
      if DRSkill.getxp('Theurgy') >= 31
        return false if DRSkill.getxp('Scholarship') >= @settings.theurgy_scholarship_threshold
      end
    end
    
    true
  end
end

Theurgy.new
